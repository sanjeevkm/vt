server.port=8080


csv.file.path=${java.io.tmpdir}


#By default, Spring Boot max file upload size is 1MB
spring.http.multipart.max-file-size=5MB
spring.http.multipart.max-request-size=5MB


####Database Settings####
#To make sure the H2 Web Console can access the database we have to append 
#DB_CLOSE_DELAY=-1 and DB_CLOSE_ON_EXIT=FALSE to the spring.datasource.url property.
spring.datasource.url=jdbc:h2:mem:app_db;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.platform=h2
spring.datasource.username=test
spring.datasource.password=
spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.initialize=true
#spring.datasource.schema=classpath*:sql/schema.sql
#spring.datasource.data=classpath*:sql/data.sql


####H2 Settings####
#Enables the H2 console, which you can get to on http://localhost:8080/console after startup
spring.h2.console.enabled=true
spring.h2.console.path=/console
spring.h2.console.settings.trace=false
spring.h2.console.settings.web-allow-others=false


#Defines whether the persistence provider shall create the database, first drop and then recreate it, only drop it or do nothing at all.
#none, create, drop-and-create, drop
spring.jpa.properties.javax.persistence.schema-generation.database.action=create
#Defines how the schema shall be created. It can be done based on the mapping metadata, a script or a combination of both.
#If this parameter is not provided, the persistence provider will use only the mapping metadata.
#metadata, script, metadata-then-script, script-then-metadata
#spring.jpa.properties.javax.persistence.schema-generation.create-source=script
#Defines the location of the create script. This parameter has to be defined, 
#if the javax.persistence.schema-generation.create-source property was set to script, metadata-then-script or script-then-metadata.
#file URL, java.IO.Writer
#spring.jpa.properties.javax.persistence.schema-generation.create-script-source=sql/schema.sql
#Defines the location of the SQL script that shall be used load data into the database.
#file URL, java.IO.Writer
#spring.jpa.properties.javax.persistence.sql-load-script-source=sql/data.sql
#Defines how the schema shall be dropped. It can be done based on the mapping metadata, a script or a combination of both.
#If this parameter is not provided, the persistence provider will use only the mapping metadata.
#metadata, script, metadata-then-script, script-then-metadata	
spring.jpa.properties.javax.persistence.schema-generation.drop-source=script
#Defines the location of the drop script. This parameter has to be defined, 
#if the javax.persistence.schema-generation.drop-source property was set to script, metadata-then-script or script-then-metadata.
#file URL, java.IO.Writer
spring.jpa.properties.javax.persistence.schema-generation.drop-script-source=sql/drop.sql
#-----  End  -----#



####Hibernate-JPA Settings####
#JPA has features for DDL generation, and these can be set up to run on startup against the database. This is controlled through two external properties:
#spring.jpa.generate-ddl=true
#In a JPA-based app, you can choose to let Hibernate create the schema or use schema.sql, but you cannot do both. 
#Make sure to disable spring.jpa.hibernate.ddl-auto if you use schema.sql.
spring.jpa.hibernate.ddl-auto=none
#none, validate, update, create, create-drop
#spring.jpa.show-sql=true

#https://www.thoughts-on-java.org/hibernate-logging-guide/
#Activating the statement logging usiing hibernate.show_sql has two big disadvantages:
#1. Hibernate writes all executed SQL statements to standard out without using the logging framework. 
#Therefore, it becomes difficult to define the log file which shall contain these specific log messages. 
#Writing to standard out is also most often much slower than using an optimized logging framework.
#2. The persistence.xml is part of a jar file of your application, 
#and you need to open that binary if you want to activate or deactivate the logging of the SQL statements. 
#The configuration of your logging framework is most often an external text file that can be easily changed on any system.
#The better way to activate the logging of executed SQL statements is to set the log level of
#the org.hibernate.SQL category to DEBUG during development and ERROR in the production.
spring.jpa.properties.hibernate.show_sql=false
spring.jpa.properties.hibernate.use_sql_comments=false
spring.jpa.properties.hibernate.format_sql=false
#Make sure that the Hibernate statistics component is deactivated in the production.
spring.jpa.properties.hibernate.generate_statistics=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
spring.jpa.properties.hibernate.jdbc.batch_size=100
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
